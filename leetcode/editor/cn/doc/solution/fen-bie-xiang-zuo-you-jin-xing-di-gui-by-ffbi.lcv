### 解题思路

从根节点开始，分别对左右两边递归的进行比较

### 代码

* java

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root.left == null && root.right == null) { // 光杆司令
            return true;
        }
        if(root.left == null || root.right == null) { // 瘸子
            return false;
        }

        return isSymmetric(root.left, root.right);
    }

    public boolean isSymmetric(TreeNode left, TreeNode right) {
        if(left == null && right == null) { // 两个空节点是对称的
            return true;
        }

        if(left == null || right == null) { // 只有一个空节点非对称
            return false;
        }

        if (left.val != right.val) { // 比较两个节点的值
            return false;
        }

        if(!isSymmetric(left.left, right.right)) { // 左节点的左子树和右节点的右子树比较
            return false;
        }

        if(!isSymmetric(left.right, right.left)) { // 左节点的右子树和右节点的左子树比较
            return false;
        }

        // 完成所有任务，表示这两个节点是对称的
        return true;
    }
    
}
```

